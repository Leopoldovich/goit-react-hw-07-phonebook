{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","components/ContactListItem/ContactListItem.module.css","components/ContactList/ContactList.module.css","redux/contacts/selectors.js","redux/contacts/actions.js","redux/contacts/contactsSlice.js","components/Filter/Filter.js","components/ContactForm/ContactForm.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","App.js","redux/contacts/reducer.js","redux/store.js","index.js"],"names":["module","exports","filterValue","state","filter","filterContact","createAction","contactsApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","builder","fetchContacts","query","providesTags","deleteContact","mutation","contactId","url","method","invalidatesTags","createContact","name","number","body","phone","useFetchContactsQuery","useDeleteContactMutation","useCreateContactMutation","Filter","dispatch","useDispatch","useSelector","contacts","data","isLoading","length","className","s","filterWrapper","type","value","onChange","event","target","filterInput","ContactForm","useState","setName","setNumber","isUpdating","handleChange","e","reset","onSubmit","preventDefault","some","contact","toLowerCase","alert","form","input","pattern","title","required","btn","disabled","color","height","width","ContactListItem","isDeleting","contactItem","btnDel","onClick","id","timeout","prototype","PropTypes","shape","string","isRequired","onDeleteContact","func","ContactList","isFetching","filterContacts","setContacts","useEffect","includes","error","contactList","map","visibleContacts","arrayOf","App","createReducer","_","payload","combineReducers","store","configureStore","reducer","middleware","getDefaultMiddleware","setupListeners","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5bee7f6f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2IfLu\",\"input\":\"ContactForm_input__3D_VH\",\"btn\":\"ContactForm_btn__3nA7A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterWrapper\":\"Filter_filterWrapper__1tLLh\",\"filterInput\":\"Filter_filterInput__2jMe-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactItem\":\"ContactListItem_contactItem__LA1id\",\"btnDel\":\"ContactListItem_btnDel__1rt3q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__2ZGYg\"};","export const filterValue = state => state.filterValue.filter;\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const filterContact = createAction('contacts/filter');\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nexport const contactsApi = createApi({\n  reducerPath: 'contactsApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'https://61eed1e0d593d20017dbb181.mockapi.io/',\n  }),\n  tagTypes: ['contact'],\n  endpoints: builder => ({\n    fetchContacts: builder.query({\n      query: () => `/contacts/`,\n      providesTags: ['contact'],\n    }),\n    deleteContact: builder.mutation({\n      query: contactId => ({\n        url: `/contacts/${contactId}`,\n        method: 'DELETE',\n      }),\n      invalidatesTags: ['contact'],\n    }),\n    createContact: builder.mutation({\n      query: (name, number) => ({\n        url: '/contacts',\n        method: 'POST',\n        body: {\n          name,\n          phone: number,\n        },\n      }),\n      invalidatesTags: ['contact'],\n    }),\n  }),\n});\n\nexport const {\n  useFetchContactsQuery,\n  useDeleteContactMutation,\n  useCreateContactMutation,\n} = contactsApi;\n","import React from 'react';\nimport s from './Filter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filterValue } from '../../redux/contacts/selectors';\nimport { filterContact } from '../../redux/contacts/actions';\nimport { useFetchContactsQuery } from '../../redux/contacts/contactsSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(filterValue);\n  const { data: contacts, isLoading } = useFetchContactsQuery();\n\n  if (!isLoading && !contacts.length) {\n    return <p>Your phonebook is empty. Please add contact.</p>;\n  }\n  return (\n    <div className={s.filterWrapper}>\n      <label>\n        Find contacts by name\n        <input\n          type=\"text\"\n          value={filter}\n          onChange={event => dispatch(filterContact(event.target.value))}\n          className={s.filterInput}\n        />\n      </label>\n    </div>\n  );\n};\n\nexport default Filter;\n","import s from './ContactForm.module.css';\nimport { useState } from 'react';\nimport { useCreateContactMutation } from '../../redux/contacts/contactsSlice';\nimport { useFetchContactsQuery } from '../../redux/contacts/contactsSlice';\nimport Loader from 'react-loader-spinner';\n\nfunction ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const [createContact, { isLoading: isUpdating }] = useCreateContactMutation();\n  const { data: contacts } = useFetchContactsQuery();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    contacts.some(contact => contact.name.toLowerCase() === name.toLowerCase())\n      ? alert(`${name} is already in contacts`)\n      : createContact(name, number);\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={s.form}>\n      <label>\n        Name\n        <input\n          className={s.input}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label>\n        Number\n        <input\n          className={s.input}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n      <button type=\"submit\" className={s.btn} disabled={isUpdating}>\n        {isUpdating ? (\n          <Loader type=\"Circles\" color=\"lightblue\" height={20} width={100} />\n        ) : (\n          'Add contact'\n        )}\n      </button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './ContactListItem.module.css';\nimport { useDeleteContactMutation } from '../../redux/contacts/contactsSlice';\nimport Loader from 'react-loader-spinner';\n\nconst ContactListItem = ({ contact }) => {\n  const [deleteContact, { isLoading: isDeleting }] = useDeleteContactMutation();\n\n  return (\n    <li className={s.contactItem}>\n      {contact.name}: {contact.phone}\n      <button\n        type=\"button\"\n        className={s.btnDel}\n        disabled={isDeleting}\n        onClick={() => deleteContact(contact.id)}\n      >\n        {isDeleting ? (\n          <Loader\n            type=\"Circles\"\n            color=\"lightblue\"\n            height={12}\n            width={12}\n            timeout={0}\n          />\n        ) : (\n          'Delete'\n        )}\n      </button>\n    </li>\n  );\n};\n\nContactListItem.prototype = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n  onDeleteContact: PropTypes.func.isRequired,\n};\nexport default ContactListItem;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport ContactListItem from '../ContactListItem';\nimport s from './ContactList.module.css';\nimport { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useFetchContactsQuery } from '../../redux/contacts/contactsSlice';\nimport { filterValue } from '../../redux/contacts/selectors';\nimport Loader from 'react-loader-spinner';\n\nconst ContactList = () => {\n  const { data: contacts, isFetching } = useFetchContactsQuery();\n  const [filterContacts, setContacts] = useState([]);\n  const value = useSelector(filterValue);\n\n  useEffect(() => {\n    try {\n      setContacts(\n        contacts.filter(({ name }) =>\n          name.toLowerCase().includes(value.toLowerCase()),\n        ),\n      );\n    } catch (error) {\n      return error;\n    }\n  }, [contacts, value]);\n\n  return (\n    <ul className={s.contactList}>\n      {isFetching && (\n        <Loader\n          type=\"Circles\"\n          color=\"lightblue\"\n          height={80}\n          width={80}\n          timeout={0}\n        />\n      )}\n      {filterContacts &&\n        filterContacts.map(contact => (\n          <ContactListItem key={contact.id} contact={contact} />\n        ))}\n    </ul>\n  );\n};\n\nContactList.prototype = {\n  visibleContacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    }),\n  ),\n  onDeleteContact: PropTypes.func.isRequired,\n};\nexport default ContactList;\n","import './App.css';\nimport Filter from './components/Filter';\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2> Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n\nexport default App;\n","import { createReducer } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport { filterContact } from './actions';\n\nconst filter = createReducer('', {\n  [filterContact]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  filter,\n});\n","import { configureStore } from '@reduxjs/toolkit';\nimport { contactsApi } from './contacts/contactsSlice';\nimport { setupListeners } from '@reduxjs/toolkit/query';\nimport filter from './contacts/reducer';\nexport const store = configureStore({\n  reducer: {\n    [contactsApi.reducerPath]: contactsApi.reducer,\n    filterValue: filter,\n  },\n  middleware: getDefaultMiddleware => [\n    ...getDefaultMiddleware(),\n    contactsApi.middleware,\n  ],\n});\n\nsetupListeners(store.dispatch);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}